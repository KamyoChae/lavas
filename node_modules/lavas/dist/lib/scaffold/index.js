'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * 获取导出的所有的 fields （包含 default 参数）
 *
 * @param  {Object} fields  传入的 fields
 * @param  {Obejct} templateConf    模版的配置
 * @return {Object}         输出的 fields
 */
let extendsDefaultFields = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (fields = {}, templateConf = {}) {
        let defaultFields = {};
        let schema = store.get('schema') || (yield lavasSchema.getSchema(templateConf));

        (0, _keys2.default)(schema).forEach(function (key) {
            return defaultFields[key] = schema[key].default;
        });

        /* eslint-disable fecs-use-computed-property */
        defaultFields.name = fields.name || 'lavas-pwa';
        defaultFields.dirPath = path.resolve(process.cwd(), fields.dirPath || '', defaultFields.name);

        return _.merge({}, defaultFields, fields);
    });

    return function extendsDefaultFields() {
        return _ref.apply(this, arguments);
    };
})();

/**
 * 获取元 Schema - 涉及模版下载的 Schema
 *
 * @return {Promise<*>}   Meta Schema
 */


function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file lavas scaffold entry
 * @author mj(zoumiaojiang@gmail.com)
 */

const path = require('path');

const _ = require('lodash');

const lavasSchema = require('./schema');
const lavasTemplate = require('./template');
const store = require('./store');exports.getMetaSchema = (0, _asyncToGenerator3.default)(function* () {
    return store.get('metaSchema') || (yield lavasSchema.getMetaSchema());
});

/**
 * 获取 Schema - 涉及模版渲染的 Schema
 *
 * @param {Object} templateConf 模版自己的配置
 * @return {Promise<*>}   Schema
 */
exports.getSchema = (() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* (templateConf = {}) {
        if (!templateConf) {
            // 如果实在没有提前下载模板，就现用默认的参数下载一个
            templateConf = yield lavasTemplate.download();
        }
        return lavasSchema.getSchema(templateConf);
    });

    return function () {
        return _ref3.apply(this, arguments);
    };
})();

/**
 * 通过指定的 meta 参数下载模版，下载成功后返回模板的 Schema 信息
 *
 * @param {Object} metaParams 导出参数
 * @return {*} 下载的临时路径 或者 报错对象
 */
exports.download = (() => {
    var _ref4 = (0, _asyncToGenerator3.default)(function* (metaParams = {}) {
        metaParams = yield extendsDefaultFields(metaParams);

        return yield lavasTemplate.download(metaParams);
    });

    return function () {
        return _ref4.apply(this, arguments);
    };
})();

/**
 * 通过指定的参数渲染下载成功的模板
 *
 * @param {Object} params 导出参数
 * @param {Object} templateConf 模版的配置
 * @return {Promise<*>}   导出的结果
 */
exports.render = (() => {
    var _ref5 = (0, _asyncToGenerator3.default)(function* (params = {}, templateConf) {

        if (!templateConf) {
            // 如果实在没有提前下载模板，就现用默认的参数下载一个（这个模板是默认的）
            templateConf = yield lavasTemplate.download();
        }

        params = yield extendsDefaultFields(params, templateConf);
        return yield lavasTemplate.render(params);
    });

    return function () {
        return _ref5.apply(this, arguments);
    };
})();

if (process.env.NODE_ENV === 'development') {
    console.log('Woow! You are in development!!!');
}